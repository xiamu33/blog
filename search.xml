<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git子模块使用</title>
      <link href="/blog/2021/10/11/git/git-submodule-usage/"/>
      <url>/blog/2021/10/11/git/git-submodule-usage/</url>
      
        <content type="html"><![CDATA[<p>在工作中我们经常遇到一个情况，在一个项目中需要包含并使用到另一个项目，比如开发博客时使用到的主题项目，或者是公司业务中需要在多个项目中使用的库。那该如何独立管理这两个项目，并在一个项目中使用另一个项目呢？</p><p>Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p><blockquote><p>注：如果以下有命令报错或无法生效，请检查 Git 的版本。</p><p>可使用 <code>git update</code> 或 <code>git update-git-for-windows</code> 命令更新 Git 。速度慢的话可以去淘宝镜像 <a href="https://npm.taobao.org/mirrors/git-for-windows/">下载</a> 。</p></blockquote><h2 id="使用子模块"><a href="#使用子模块" class="headerlink" title="使用子模块"></a>使用子模块</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git submodule add [-b &lt;branch&gt;] [-f|--force] [--name &lt;name&gt;] [--reference &lt;repository&gt;] [--depth &lt;depth&gt;] [--] &lt;repository&gt; [&lt;path&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化子模块"><a href="#初始化子模块" class="headerlink" title="初始化子模块"></a>初始化子模块</h3><p>首先，在主项目中执行以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git submodule add --name matery git@github.com:xiamu33/hexo-theme-matery.git themes/xiamu-materyCloning into 'blog/themes/xiamu-matery'......Resolving deltas: 100% (8/8), done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时，在指定的 <code>themes</code> 目录下会生成一个名为 <code>xiamu-matery</code> 子模块。</p><p>并且在根目录生成了新的 <code>.gitmodules</code> 文件，该配置文件保存了项目 URL 取的本地目录之间的映射：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[submodule "matery"]  path = themes/xiamu-matery  url = git@github.com:xiamu33/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有多个子模块，该文件中就会有多条记录。注意该文件也需要纳入 Git 的版本管理并推送至仓库，这样克隆该项目的人才知道去哪获得子模块。</p><h3 id="克隆含有子模块的项目"><a href="#克隆含有子模块的项目" class="headerlink" title="克隆含有子模块的项目"></a>克隆含有子模块的项目</h3><p>当我们克隆一个包含子模块的项目时，项目中会默认包含该子模块目录，但其中没有任何文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git clone git@github.com:xiamu33/blog.gitCloning into 'blog'......Resolving deltas: 100% (90/90), done.$ ls blog/themes/xiamu-matery/$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你必须执行 <code>git submodule update --init</code> 来初始化本地配置并拉取子模块数据（该命令实际上把 <code>git submodule init</code> 和 <code>git submodule update</code> 合并成了一步）。</p><p>项目中有许多子模块的话这样操作未免有些繁琐，如果给 <code>git clone</code> 命令传递 <code>--recurse-submodules</code> 选项，它就会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git clone --recurse-submodules git@github.com:xiamu33/blog.gitCloning into 'blog'......Resolving deltas: 100% (90/90), done.Submodule 'themes/hexo-theme-matery' (git@github.com:xiamu33/hexo-theme-matery.git) registered for path 'themes/xiamu-matery'Cloning into 'blog/themes/xiamu-matery'...Submodule path 'themes/xiamu-matery': checked out '8017ee19d9f040607b4ca58286eb46596f773e61'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="克隆失败"><a href="#克隆失败" class="headerlink" title="克隆失败"></a>克隆失败</h4><p>But，由于国内神奇的网络问题或者其他诡异的现象，“偶尔”会克隆失败（如出现 <code>OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054</code> 错误时）。可以尝试以下方法：</p><ul><li>挂梯子；</li><li>使用 ssh 克隆： <code>git clone git@github.com:xiamu33/blog.git</code> ；</li><li>关闭 ssl 验证： <code>git config --global http.sslVerify false</code> 。</li></ul><p>如果只成功克隆了主项目，可执行 <code>git submodule update --init --recursive</code> 初始化并拉取项目中嵌套的所有子模块。</p><h4 id="如何浅克隆子模块"><a href="#如何浅克隆子模块" class="headerlink" title="如何浅克隆子模块"></a>如何浅克隆子模块</h4><p>当我们的子模块项目十分庞大且只需要其最近的提交历史时，可以选择浅克隆子模块。只需给 <code>git submodule update</code> 传递 <code>--depth &lt;depth&gt;</code>  选项：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git submodule add --name matery --depth 1 git@github.com:xiamu33/hexo-theme-matery.git themes/xiamu-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>已有子模块的项目中则执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git submodule update --init --depth 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，你本地项目的子模块的克隆将作为浅克隆执行（历史深度为1）。如果你想始终浅克隆该子模块，可执行以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config -f .gitmodules submodule.&lt;name&gt;.shallow true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>&lt;name&gt;</code> 为 <code>git submodule add</code> 命令中的 <code>--name</code> 选项，默认为子模块路径 <code>&lt;path&gt;</code></p></blockquote><p>这将修改 <code>.gitmodules</code> 文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[submodule "matery"]  path = themes/xiamu-matery  url = git@github.com:xiamu33/hexo-theme-matery.git  shallow = true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h2><h3 id="拉取子模块改动"><a href="#拉取子模块改动" class="headerlink" title="拉取子模块改动"></a>拉取子模块改动</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git submodule update --remote [&lt;path&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Git 默认会尝试更新 <strong>所有</strong> 子模块， 可以传递 <code>&lt;path&gt;</code> 更新指定的子模块。</p><h3 id="拉取整个项目的改动"><a href="#拉取整个项目的改动" class="headerlink" title="拉取整个项目的改动"></a>拉取整个项目的改动</h3><p>默认情况下，<code>git pull</code> 命令会递归抓取子模块的更改，但并不会更新子模块，需要再执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想自动化次过程，可以给 <code>git pull</code> 命令传递 <code>--recurse-submodules</code> 选项：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git pull --recurse-submodules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果总是想以 <code>--recurse-submodules</code> 拉取，可将 <code>submodule.recurse</code> 设置为 <code>true</code> 。这会让 Git 为除 <code>clone</code> 外所有支持 <code>--recurse-submodules</code> 的命令使用该选项。</p><h4 id="子模块的URL变动"><a href="#子模块的URL变动" class="headerlink" title="子模块的URL变动"></a>子模块的URL变动</h4><p>如果子模块的 URL 发生变动，即与 <code>.gitmodules</code> 文件中的 URL 不同。此时拉取子模块会失败，需执行 <code>git submodule sync</code> ：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git submodule sync --recursive$ git submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="发布子模块改动"><a href="#发布子模块改动" class="headerlink" title="发布子模块改动"></a>发布子模块改动</h3><p>如果我们同时在主项目和子模块中提交了更改，但忘记了推送子模块的改动，会导致其他开发人员无法更新子模块。为了确保不发生这种情况，可以让 Git 在推送主项目前检查所有子模块是否已推送。</p><p><code>git push</code> 命令可以传递 <code>--recurse-submodules=check|on-demand|only|no</code> 选项，你也可以执行 <code>git config push.recurseSubmodules check|on-demand|only|no</code> 设置默认行为。</p><ul><li><code>check</code> ：Git 会递归检查所有子模块的改动是否已推送，如果有任何未推送的子模块改动，那么 <code>push</code> 操作会直接失败；</li><li><code>on-demand</code>：Git 会尝试在推送主项目前推送所有的子模块，如果某个子模块推送失败，那么主项目也会推送失败；</li><li><code>only</code> ：Git 会仅尝试推送子模块，而不会推送主项目；</li><li><code>no</code> ：当 <code>push</code> 操作不需要递归子模块时，使用 <code>no</code> 参数或传递 <code>--no-recurse-submodules</code> 选项可覆盖 <code>push.recurseSubmodules</code> 配置。</li></ul><h3 id="子模块的技巧"><a href="#子模块的技巧" class="headerlink" title="子模块的技巧"></a>子模块的技巧</h3><h4 id="子模块遍历"><a href="#子模块遍历" class="headerlink" title="子模块遍历"></a>子模块遍历</h4><p>子模块有个 <code>foreach</code> 命令，它可以在所有子模块中执行任意命令。如果项目中包含大量子模块，这将会非常有用。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git submodule foreach "git pull"Entering 'themes/xiamu-matery'Already up to date.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="一些有用的别名"><a href="#一些有用的别名" class="headerlink" title="一些有用的别名"></a>一些有用的别名</h4><p>当你不想输入十分冗长的命令又不想设置默认选项时，可以设置一些有用的 Git 别名：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config alias.sdiff "!git diff &amp;&amp; git submodule foreach 'git diff'"$ git config alias.spush "push --recurse-submodules=on-demand"$ git config alias.supdate "submodule update --remote --merge"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h2><ul><li><code>rm -rf themes/xiamu-matery</code> ：删除项目中的子模块目录；</li><li><code>rm -rf .git/modules/matery</code> ：删除 <code>.git</code> 中的子模块目录；</li><li><code>vim .gitmodules</code> ：删除 <code>.gitmodules</code> 文件中子模块的条目；</li><li><code>vim .git/config</code> ：删除项目配置中子模块的条目。</li></ul><p>当你遇到诸如以下报错时，也可尝试删除并重新初始化子模块。</p><blockquote><p><code>fatal: 'xxx' already exists in the index</code></p><p><code>fatal: 'xxx' already exists and is not a valid git repo</code></p><p><code>fatal: could not get a repository handle for submodule 'xxx'</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 commitizen 规范 git 提交</title>
      <link href="/blog/2020/12/03/git/git-ti-jiao-gui-fan/"/>
      <url>/blog/2020/12/03/git/git-ti-jiao-gui-fan/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要规范-git-提交"><a href="#为什么要规范-git-提交" class="headerlink" title="为什么要规范 git 提交"></a>为什么要规范 git 提交</h2><p>git 每次的代码提交，都需要写一份提交说明，否则不允许提交。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git commit -m &lt;commit message&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令可快速编写并提交一行提交说明。</p><p>如果一行说明不够，可执行 <code>git commit</code> ，会启动指定的文本编辑器，允许你写多行说明。</p><p>git 本身的提交命令并不会限制提交内容，但是规范的 commit message 还是有诸多好处的：</p><ul><li>提供更多的修改信息，方便快速浏览。</li><li>可以通过 <code>--grep</code> 选项过滤提交，便于快速查找信息。</li><li>可以直接从 commit 生成 Change log（发布新版本时用于说明版本差异的文档）。</li></ul><h2 id="commit-message-格式"><a href="#commit-message-格式" class="headerlink" title="commit message 格式"></a>commit message 格式</h2><p>commit message 包括三个部分：Header、Body 和 Footer：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&lt;body&gt;&lt;footer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 Header 是必需的，Body 和 Footer 可省略。</p><p>不管是哪一个部分，任何一行都不得超过 100 个字符。这是为了避免自动换行影响美观。</p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分只有一行，包括三个字段：type（必需）、scope（可选）和 subject（必需）。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>type 用于说明 commit 类别，一般只允许以下几个标识：</p><ul><li><code>feat</code>: 新功能。</li><li><code>fix</code>: 修复 bug。</li><li><code>docs</code>: 针对文档的修改。</li><li><code>style</code>: 代码格式修改（不影响代码运行的变动）。</li><li><code>refactor</code>: 代码重构（不增加新功能，也不修复 bug）。</li><li><code>perf</code>: 性能优化。</li><li><code>test</code>: 修改测试用例。</li><li><code>build</code>: 影响构建流程或外部依赖的变动（npm, webpack）。</li><li><code>ci</code>: 修改 CI 配置文件或脚本。</li><li><code>chore</code>: 其他不影响程序功能和测试用例的变动。</li><li><code>revert</code>: 回滚提交（建议附上回滚 commit 的 hash 及 Header）。</li></ul><h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p>scope 用于说明本次 commit 的影响范围，具体内容由项目决定。</p><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p>subject 为本次 commit 的简要说明，一般不超过 70 字。建议使用祈使句。</p><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>Body 是对本次 commit 改动的详细描述，可以写成多行。建议使用祈使句。</p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>Footer 部分一般只用于两种情况：</p><h4 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h4><p>如果代码改动与上一个版本不兼容，则 Footer 部分需要以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p><h4 id="关闭-Issue"><a href="#关闭-Issue" class="headerlink" title="关闭 Issue"></a>关闭 Issue</h4><p>如果本次 commit 会影响某个 issue，可以在 Footer 部分附加该 issue 信息，如<code>close #233</code> 、<code>fix #233</code>、<code>re #233</code>。</p><h2 id="使用-commitzen"><a href="#使用-commitzen" class="headerlink" title="使用 commitzen"></a>使用 commitzen</h2><p>如果每次提交都需要纯手动输入提交说明，难免会觉得些许麻烦。我们可以使用<code>commitzen</code>工具来帮助生成符合格式的 commit message。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g commitizen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在可以使用 <code>git cz</code> 代替 <code>git commit</code> 进行提交。</p><h4 id="在项目中安装"><a href="#在项目中安装" class="headerlink" title="在项目中安装"></a>在项目中安装</h4><p>如果你使用的<code>npm</code>版本大于<strong>5.2</strong>，可以局部安装并使用<code>npx cz</code> 以取代全局安装，或者写入 npm script 中。</p><p>如果你的项目是 commitzen 友好的，那系统将按项目制定的格式进行提示并格式化 commit message。否则，可使用<code>cz-conventional-changelog</code>插件快速设置。</p><h3 id="使用-cz-conventional-changelog"><a href="#使用-cz-conventional-changelog" class="headerlink" title="使用 cz-conventional-changelog"></a>使用 cz-conventional-changelog</h3><h4 id="全局安装-1"><a href="#全局安装-1" class="headerlink" title="全局安装"></a>全局安装</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g cz-conventional-changelog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>commitzen 的全局配置文件位于<code>~/.czrc</code>，执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">echo '{ "path": "cz-conventional-changelog" }' &gt; ~/.czrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Windows 环境下，执行 <code>git cz</code> 时可能会报错：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">The config file at "C:\Users\Administrator\.czrc" contains invalid charset, expect utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 PowerShell 中 echo 生成的<code>.czrc</code>为<code>UTF-16</code>，只需重新手动创建该文件并写入内容即可。</p></blockquote><h4 id="在项目中安装-1"><a href="#在项目中安装-1" class="headerlink" title="在项目中安装"></a>在项目中安装</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">commitizen init cz-conventional-changelog --save-dev --save-exact<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用<code>yarn</code>：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">commitizen init cz-conventional-changelog --yarn --dev --exact<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在<strong>package.json</strong>文件中配置：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">...  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"commitizen"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"cz-conventional-changelog"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者添加一个<code>.czrc</code> 或 <code>.cz.json</code> 文件：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"cz-conventional-changelog"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在你可以使用<code>git cz</code> 替代<code>git commit</code>的所有操作，比如：<code>git cz -a</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 容器使用</title>
      <link href="/blog/2020/11/30/docker/docker-rong-qi-shi-yong/"/>
      <url>/blog/2020/11/30/docker/docker-rong-qi-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker run -t -i ubuntu /bin/bashroot@11a6df69c3cf:/#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-t</code>: 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上。</li><li><code>-i</code>: 让容器的标准输入保持打开。</li><li><code>ubuntu:latest</code>: 这是指用 ubuntu 最新版本镜像为基础来启动容器。</li><li><code>/bin/bash</code>: 放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash</li></ul><blockquote><p>启动容器若本地没有改镜像，会自动从<a href="https://hub.docker.com/">docker hub</a>上拉取</p></blockquote><h2 id="查看运行的容器"><a href="#查看运行的容器" class="headerlink" title="查看运行的容器"></a>查看运行的容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker ps -aCONTAINER ID        IMAGE         COMMAND                CREATED             STATUS                               PORTS        NAMES11a6df69c3cf        ubuntu        "/bin/bash"            6 minutes ago       Exited (127) 3 minutes ago                        competent_hodgkin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-a</code>: 可以查看已停止的容器。</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker start 11a6df69c3cf11a6df69c3cf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -it -d --name node-demo node-demo:1.0.0 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-d</code>: 在后台运行容器。</li></ul><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker stop node-demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rm [OPTIONS] node-demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>OPTIONS：</p><ul><li><code>-f</code>(<code>--force</code>): 强制删除容器（即使容器还在运行）。</li><li><code>-l</code>(<code>--link</code>): 删除指定的链接。</li><li><code>-v</code>(<code>--volumes</code>): 删除与容器关联的匿名卷。</li></ul><h2 id="进入启动中的容器"><a href="#进入启动中的容器" class="headerlink" title="进入启动中的容器"></a>进入启动中的容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it node-demo /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看容器资源使用情况"><a href="#查看容器资源使用情况" class="headerlink" title="查看容器资源使用情况"></a>查看容器资源使用情况</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker stats [OPTIONS] [CONTAINER...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>OPTIONS：</p><ul><li><code>-a</code>(<code>--all</code>): 显示所有容器。</li><li><code>--format</code>: 格式化打印的图像。</li><li><code>--no-stream</code>: 禁用流统计信息，仅输出当前资源使用情况。</li><li><code>--no-trunc</code>: 不截短输出信息，也会显示完整的CONTAINER ID。</li></ul><h2 id="导出导入容器"><a href="#导出导入容器" class="headerlink" title="导出导入容器"></a>导出导入容器</h2><h3 id="导出容器快照"><a href="#导出容器快照" class="headerlink" title="导出容器快照"></a>导出容器快照</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker psCONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS                 PORTS          NAMES4163d0029b09        node-demo:1.0.0        "docker-entrypoint.s…"   16 seconds ago      Up 15 seconds          3000/tcp       node-demo~$ mkdir docker~$ docker export node-demo &gt; ~/docker/node-demo.tar~$ ls docker/node-demo.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入容器快照为镜像"><a href="#导入容器快照为镜像" class="headerlink" title="导入容器快照为镜像"></a>导入容器快照为镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="从url导入"><a href="#从url导入" class="headerlink" title="从url导入"></a>从url导入</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker import http://example.com/exampleimage.tgz example/imagerepo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="从本地快照文件导入"><a href="#从本地快照文件导入" class="headerlink" title="从本地快照文件导入"></a>从本地快照文件导入</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker import docker/node-demo.tar - node-demo-import:1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="通过管道导入"><a href="#通过管道导入" class="headerlink" title="通过管道导入"></a>通过管道导入</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat docker/node-demo.tar | docker import - node-demo-import:2.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 镜像使用</title>
      <link href="/blog/2020/11/29/docker/docker-jing-xiang-shi-yong/"/>
      <url>/blog/2020/11/29/docker/docker-jing-xiang-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="列出镜像列表"><a href="#列出镜像列表" class="headerlink" title="列出镜像列表"></a>列出镜像列表</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker images ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取一个新的镜像"><a href="#获取一个新的镜像" class="headerlink" title="获取一个新的镜像"></a>获取一个新的镜像</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker search node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rmi hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="从镜像创建容器"><a href="#从镜像创建容器" class="headerlink" title="从镜像创建容器"></a>从镜像创建容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker run -t -i ubuntu:latest /bin/bashroot@2069543a26b6:/#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-t</code>: 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上。</li><li><code>-i</code>: 让容器的标准输入保持打开。</li><li><code>ubuntu:latest</code>: 这是指用 ubuntu 最新版本镜像为基础来启动容器。</li><li><code>/bin/bash</code>: 放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li></ul><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p><ul><li>从已经创建的容器中更新镜像，并且提交这个镜像</li><li>使用 Dockerfile 来创建一个新的镜像</li></ul><h3 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h3><p>更新镜像之前，我们需要使用镜像来创建一个容器。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker run -it ubuntu:latest /bin/bashroot@56715f5ac67f:/# ls tmp/root@56715f5ac67f:/# echo hello-world &gt; tmp/index.htmlroot@56715f5ac67f:/# ls tmp/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后修改容器中的内容，修改完成输入 <code>exit</code> 命令来退出这个容器。</p><blockquote><p>如果修改的时候没有vim，需要先执行 <code>apt-get update</code> 用于同步 <code>/etc/apt/sources.list</code> 和 <code>/etc/apt/sources.list.d</code> 中列出的源的索引。</p><p>如果update速度过慢，可以修改为国内镜像源：</p><ul><li><p><a href="http://mirrors.ustc.edu.cn/">中科大开源镜像站</a></p></li><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源镜像站</a></p></li><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">北京外国语大学开源镜像站</a></p></li><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">上海交大开源镜像站</a></p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>更改的容器。我们可以通过命令 <code>docker commit</code> 来提交容器副本：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker commit  -m "update file" -a xiamu33 56715f5ac67f ubuntu:testsha256:fae557168bf469b6204ce0d3edc60f24e828c910dc584915c2c8a2ab517b4ebe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-m</code>: 提交的描述信息</li><li><code>-a</code>: 指定镜像作者</li><li><code>56715f5ac67f</code>：容器 ID，这里也可以使用自己指定或docker自动生成的NAMES</li><li><code>ubuntu:test</code>: 指定要创建的目标镜像名</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker image lsREPOSITORY            TAG                 IMAGE ID            CREATED             SIZEubuntu                test                fae557168bf4        17 seconds ago      167MBubuntu                latest              f643c72bc252        3 days ago          72.9MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到我们已经在 <code>ubuntu:latest</code> 的基础上更新了一份 id 为 <code>fae557168bf4</code> 的新镜像 <code>ubuntu:test</code></p><p>使用新镜像来创建容器：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker run -it ubuntu:test /bin/bashroot@628d103aed32:/# ls tmp/index.htmlroot@628d103aed32:/# cat tmp/index.htmlhello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到新镜像里已经有了我们之前的修改</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>我们使用 <code>docker build</code> 命令从零开始创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。Dockerfile 文件之后再谈。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker build -t node-demo:1.0.0 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-t</code> ：指定要创建的目标镜像名，这里即为 node-demo:1.0.0</li><li><code>.</code> ：Dockerfile 文件所在目录，可以指定 Dockerfile 的绝对路径</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker image lsREPOSITORY            TAG                 IMAGE ID            CREATED             SIZEnode-demo             1.0.0               3b7cf97f35ea        38 seconds ago      922MBnode                  latest              2d840844f8e7        4 days ago          935MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker tag node-demo:1.0.0 xiamu33/node-demo:1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">~$ docker image lsREPOSITORY            TAG                 IMAGE ID            CREATED             SIZEnode-demo             1.0.0               3b7cf97f35ea        5 minutes ago       922MBxiamu33/node-demo     1.0.0               3b7cf97f35ea        5 minutes ago       922MBnode                  latest              2d840844f8e7        4 days ago          935MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到现在两个 <code>IMAGE ID</code> 一致的镜像，实际上它们是一个镜像的两个别名，在想重命名某个镜像时可以先修改镜像标签，再将旧标签删除</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 中的正则表达式</title>
      <link href="/blog/2020/10/30/regexp/javascript-zhong-de-zheng-ze-biao-da-shi/"/>
      <url>/blog/2020/10/30/regexp/javascript-zhong-de-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>部分尖括号<code>&lt;&gt;</code>内容表示需要手动输入值</p></blockquote><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>有两种方法创建一个 RegExp 对象：</p><ul><li><p>字面量：<code>/&lt;regexp choice&gt;/gim</code></p></li><li><p>构造函数： <code>new RegExp("&lt;regexp choice&gt;", "gim")</code></p></li></ul><p>一般推荐使用字面量创建正则表达式；在需要使用变量或为了方便阅读使用字符串拼接时，可使用构造函数形式。</p><p>RegExp 能设置三个标识，分别由字母<code>g</code>、<code>i</code>、<code>m</code>表示：</p><table><thead><tr><th align="center">标识</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">g</td><td align="left">全局的（匹配多次；不同的方法对<code>g</code>标识的处理不尽相同）</td></tr><tr><td align="center">i</td><td align="left">大小写不敏感</td></tr><tr><td align="center">m</td><td align="left">多行（<code>^</code>和<code>$</code>能匹配行尾符）</td></tr></tbody></table><p>RegExp 对象的属性：</p><table><thead><tr><th align="center">属性</th><th>用法</th></tr></thead><tbody><tr><td align="center">global</td><td>如果标识<code>g</code>被使用，值为<code>true</code></td></tr><tr><td align="center">ignoreCase</td><td>如果标识<code>i</code>被使用，值为<code>true</code></td></tr><tr><td align="center">lastIndex</td><td>下一次<code>exec</code>匹配开始的索引。初始值为<code>0</code></td></tr><tr><td align="center">multiline</td><td>如果标识<code>m</code>被使用，值为<code>true</code></td></tr><tr><td align="center">source</td><td>正则表达式源码文本</td></tr></tbody></table><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>一个正则表达式分支包含一个或多个正则表达式序列。</p><p>这些序列被<code>|</code>字符分割。如果这些序列中任何一项符合匹配条件，那么这个选择就被匹配。它尝试按顺序依次匹配这些序列项。故：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"into"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">in|int</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会匹配<code>in</code>。它不会匹配<code>int</code>，因为<code>in</code>已经被成功匹配了。</p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>一个正则表达式序列包含一个或多个正则表达式因子。</p><p>每个因子可选择是否跟随一个量词，这个量词决定这个因子被允许匹配的次数。如果没有指定量词，则该因子只会被匹配一次。</p><h3 id="因子"><a href="#因子" class="headerlink" title="因子"></a>因子</h3><p>一个正则表达式因子可以是一个字符、一个由圆括号包围的组、一个字符类、或者一个转义序列。</p><p>除了控制字符和特殊字符以外，所有的字符都会被按照字面处理：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">\ <span class="token operator">/</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token operator">+</span> <span class="token operator">*</span> <span class="token operator">|</span> <span class="token punctuation">.</span> <span class="token operator">^</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想让以上字符按字面去匹配，必须要用一个<code>\</code>前缀来进行转义。</p><p>一个未被转义的<code>.</code>会匹配除行结束符以外的任何字符。</p><p>当指定了<code>g</code>标识且<code>lastIndex</code>属性值为<code>0</code>或未指定<code>g</code>标识时，一个未转义的<code>^</code>会匹配文本的开始；当指定了<code>m</code>标识时，它也能匹配行结束符。</p><p>一个未转义的<code>$</code>将匹配文本的结束。当指定了<code>m</code>标识时，它也能匹配行结束符。</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>反斜杠字符<code>\</code>在正则表达式因子中与其在字符串中一样均表示转义。</p><p>转义字符含义：</p><table><thead><tr><th align="center">转义字符</th><th>含义</th></tr></thead><tbody><tr><td align="center">\f</td><td>换页符</td></tr><tr><td align="center">\n</td><td>换行符</td></tr><tr><td align="center">\r</td><td>回车符</td></tr><tr><td align="center">\t</td><td>制表符(tab)</td></tr><tr><td align="center">\u</td><td>允许指定一个 Unicode 字符来表示一个十六进制的常量</td></tr><tr><td align="center">\d</td><td>等同于<code>[0-9]</code>，它匹配一个数字。<code>\D</code>则表示与其相反的<code>[^0-9]</code></td></tr><tr><td align="center">\s</td><td>等同于<code>[\f\n\r\t\u000B\u0020\u00A0\u2028\u2029]</code>。这是 Unicode 空白符的一个不完全子集。<code>\S</code>则与其相反</td></tr><tr><td align="center">\w</td><td>等同于<code>[0-9A-Za-z_]</code>。<code>\W</code>则与其相反。<code>\W</code>本意是希望表示出现在话语中的字符。遗憾的是，它所定义的类实际上对任何真正的语言来说都**<em>不起作用</em>**</td></tr><tr><td align="center">\b</td><td>被指定为一个字边界标识，用于对文本的字边界进行匹配。遗憾的是，它使用<code>\w</code>去寻找边界，所以他对多语言应用来说是**<em>完全无用的</em>**</td></tr><tr><td align="center">\1</td><td>指向<em>分组 1</em>所捕获到的文本的一个引用，所以它能再次匹配。如正则表达式：<code>d</code>；<code>\2</code>是指向<em>分组 2</em>的引用，以此类推</td></tr></tbody></table><blockquote><p>如正则表达式：<code>/(?:^|\s+?)([A-Za-z\u00C0-\u1FFF\u2800-\uFFFD]+)\s+\1(?:$|\s+?)/gi</code>可以用来搜索文本中重复的单词。</p></blockquote><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>在了解正则表达式分组前先思考几个需求：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> htmlStr <span class="token operator">=</span>  <span class="token string">"&lt;div&gt;&lt;p&gt;&lt;span&gt;content1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;content2&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;br/&gt;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><p>将所有 p 标签替换为 span 标签</p></li><li><p>匹配非 p 或 br 的标签，全部替换为 div 标签</p></li></ol><h4 id="捕获型"><a href="#捕获型" class="headerlink" title="捕获型"></a>捕获型</h4><p>一个捕获型分组是一个被包围在圆括号中的正则表达式分支。</p><p>任何匹配这个分组的字符都会被捕获。每个捕获型分组都被指定了一个数字，在正则表达式中第一个捕获<code>(</code>的是<em>分组 1</em>，第二个捕获<code>(</code>的是<em>分组 2</em>，以此类推。在正则表达式中<code>\&lt;n&gt;</code>指向第 n 个分组，在正则表达式匹配后<code>RegExp.$&lt;n&gt;</code>指向第 n 个分组。</p><p>由此可以解决<em>需求 1</em>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">htmlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(\/?)p&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&lt;$1span&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;div&gt;&lt;span&gt;&lt;span&gt;content1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;content2&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br/&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>但如果我匹配出<code>p</code>而不想匹配出尖括号<code>&lt;&gt;</code>呢？</p></blockquote><h4 id="非捕获型"><a href="#非捕获型" class="headerlink" title="非捕获型"></a>非捕获型</h4><p>非捕获型分组有一个<code>(?:</code>前缀（捕获型仅为<code>(</code>前缀）。</p><p>非捕获型只做简单匹配，并不会捕获所匹配的文本，这会带来微弱的性能优势，且不会干扰捕获型分组的编号，即无法通过引用符<code>\&lt;n&gt;</code>或<code>$&lt;n&gt;</code>来对其引用（_非捕获性_）。</p><h4 id="向前正向匹配（前瞻正向断言）"><a href="#向前正向匹配（前瞻正向断言）" class="headerlink" title="向前正向匹配（前瞻正向断言）"></a>向前正向匹配（前瞻正向断言）</h4><p>向前正向匹配分组有一个<code>(?=</code>前缀。</p><p>它类似于非捕获型分组，但在这个分组匹配成功后，文本会回到它开始的地方，实际上并不匹配任何东西。它只匹配一个位置，如同<code>^</code>匹配开头，<code>$</code>匹配结尾。</p><p><strong>如：<code>x(?=y)</code>表示匹配<code>x</code>，仅在后面是<code>y</code>的情况</strong></p><h4 id="向前负向匹配（前瞻负向断言）"><a href="#向前负向匹配（前瞻负向断言）" class="headerlink" title="向前负向匹配（前瞻负向断言）"></a>向前负向匹配（前瞻负向断言）</h4><p>向前负向匹配分组有一个<code>(?!</code>前缀。</p><p>它类似于向前正向匹配分组，但只有当它匹配失败后，它才会继续向前匹配。</p><p><strong>如：<code>x(?!y)</code>表示匹配<code>x</code>，仅在后面不是<code>y</code>的情况</strong></p><p>由此可以解决<em>需求 2</em>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">htmlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(\/?)(?!p|\/p|br\/?).*?&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&lt;$1div&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;div&gt;&lt;p&gt;&lt;div&gt;content1&lt;/div&gt;&lt;br/&gt;&lt;div&gt;content2&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;br/&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>值得注意的是：对于匹配<code>p</code>或者<code>/p</code>标签的规则<code>(\/?)(?!p|\/p)</code>中，<code>|\/p</code>规则是不能省略的，否则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"&lt;p&gt;&lt;/p&gt;"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(\/?)(?!p).*?&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["&lt;/p&gt;"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里正则向前匹配，第一个<code>&lt;p&gt;</code>标签没什么好说的；在第二个<code>&lt;/p&gt;</code>标签匹配到<code>/</code>时，由于后面是个向前负向匹配，需要对<code>/</code>进行前瞻断言，但是后面是字符<code>p</code>，所以不匹配<code>/</code>。此时文本会回到<code>&lt;</code>重新断言（此时<code>(\/?)</code>匹配为空），后面是字符<code>/p</code>，故可以被该规则匹配。</p></blockquote><h4 id="向后正向匹配（后瞻正向断言）"><a href="#向后正向匹配（后瞻正向断言）" class="headerlink" title="向后正向匹配（后瞻正向断言）"></a>向后正向匹配（后瞻正向断言）</h4><p>向后正向匹配分组有一个<code>(?&lt;=</code>前缀（**<em>es2018 才支持向后匹配</em>**）。</p><p>它类似于向前正向匹配，不过它是在相反的方向上进行条件判断。</p><p><strong>如：<code>(?&lt;=y)x</code>表示匹配<code>x</code>，仅在前面是<code>y</code>的情况</strong></p><h4 id="向后负向匹配（后瞻负向断言）"><a href="#向后负向匹配（后瞻负向断言）" class="headerlink" title="向后负向匹配（后瞻负向断言）"></a>向后负向匹配（后瞻负向断言）</h4><p>向后负向匹配分组有一个<code>(?&lt;!</code>前缀。</p><p><strong>如：<code>(?&lt;!y)x</code>表示匹配<code>x</code>，仅在前面不是<code>y</code>的情况</strong></p><blockquote><p>现在我们可以解决前面的一个问题了。如何不匹配出尖括号<code>&lt;&gt;</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">htmlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=&lt;)(\/?)p(?&lt;!&gt;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"$1span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;div&gt;&lt;span&gt;&lt;span&gt;content1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;content2&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br/&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这和上面的正则是一个效果。</p></blockquote><h3 id="字符集（类）"><a href="#字符集（类）" class="headerlink" title="字符集（类）"></a>字符集（类）</h3><p>正则表达式字符集是一种指定一组字符的便利方式。</p><blockquote><p>如：如果想匹配一个元音字母，我们可以写做<code>(?:a|e|i|o|u)</code>，但它可以被更方便地写成一个类<code>[aeiou]</code>。</p></blockquote><p>另一个方便之处是类的求反。如果<code>[</code>后的第一个字符是<code>^</code>，那么这个类会排除这些特殊字符。</p><blockquote><p>如：<code>[^!-\/:-@\[-`{-~]</code>会匹配任何一个非 ASCII 特殊字符的字符。</p></blockquote><h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>字符类内部的转义规则和正则表达式因子的相比稍有不同。</p><p><code>[\b]</code>表示退格符（backspace）。下面是在字符类中需要被转义的特殊字符：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span> \ <span class="token operator">/</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>正则表达式因子可以用一个正则表达式量词后缀来决定这个因子应该被匹配的次数。</p><p>包围在一对花括号中的数字表示这个因子应该被匹配的次数。故，<code>/www/</code>和<code>/w{3}/</code>匹配的是一致的，<code>{3,6}</code>会匹配 3~6 次，<code>{3,}</code>会匹配 3 次或更多。</p><blockquote><p><code>?</code>等同于<code>{0,1}</code>；<code>*</code>等同于<code>{0,}</code>；<code>+</code>等同于<code>{1,}</code></p></blockquote><p><strong>如果只有一个量词，表示趋向于进行贪婪匹配</strong>，即匹配尽可能多的副本直至上限；</p><p><strong>如果这个量词附加一个后缀<code>?</code>，则表示趋向于进行非贪婪匹配</strong>，即只匹配必要的副本。</p><blockquote><p>在上述<em>需求 2</em>的解决方案<code>htmlStr.replace(/&lt;(\/?)(?!p|\/p|br\/?).*?&gt;/g, "&lt;$1div&gt;");</code>的<code>.*?</code>表示只匹配一个尖括号中的字符，否则该正则表达式将贪婪匹配整个字符串：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">htmlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(\/?)(?!p|\/p|br\/?).*&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&lt;$1div&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;div&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> regexp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令汇总</title>
      <link href="/blog/2020/06/06/git/git-chang-yong-ming-ling-hui-zong/"/>
      <url>/blog/2020/06/06/git/git-chang-yong-ming-ling-hui-zong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：中括号中为可选项</p></blockquote><h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h3><ul><li><p><code>git clone &lt;url&gt; [&lt;local-project-name&gt;]</code> 从远程服务器克隆仓库至本地目录名下。</p></li><li><p><code>git init</code> 初始化本地仓库。</p></li></ul><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><ul><li><p><code>git remote [show]</code> 查看远程仓库的简写。</p></li><li><p><code>git remote -v</code> 查看远程仓库的简写及其对应的 url。</p></li><li><p><code>git remote add &lt;short-name&gt; &lt;url&gt;</code> 添加远程仓库。</p></li><li><p><code>git remote rename &lt;old-name&gt; &lt;new-name&gt;</code> 重命名远程仓库（也会修改远程分支的名字）。</p></li><li><p><code>git remote rm &lt;remote-name&gt;</code> 删除远程仓库。</p></li><li><p><code>git fetch [&lt;remote-name&gt;]</code> 从远程仓库抓取数据（不会合并入本地工作）。</p></li><li><p><code>git pull [&lt;remote-name&gt; &lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</code> 拉取指定远程分支数据至指定（或同名）本地分支，省略所有选项则拉取已跟踪远程分支数据。</p></li><li><p><code>git branch --set-upstream-to=&lt;remote-name&gt;/&lt;branch-name&gt;</code> 让本地分支跟踪远程分支。</p></li><li><p><code>git push [&lt;remote-name&gt; &lt;local-branch-name&gt;[:&lt;remote-branch-name&gt;]]</code> 推送至远程仓库。</p></li><li><p><code>git branch -r</code> 查看远程分支。</p></li></ul><h3 id="记录更新"><a href="#记录更新" class="headerlink" title="记录更新"></a>记录更新</h3><ul><li><p><code>git status</code> 查看当前文件详细状态； <code>git status -s</code> 查看简要状态。</p></li><li><p><code>git add &lt;file-path&gt;</code> 跟踪暂存文件； <code>git add .</code> 跟踪并暂存当前目录层级下所有文件（被忽略的文件除外）。</p></li><li><p><code>git diff</code> 查看工作目录文件相对暂存去的修改； <code>git diff --cached</code> 或者 <code>git diff --staged</code> 查看暂存区文件相对上次提交的修改。</p></li><li><p><code>git commit</code> 将暂存区文件提交更新； <code>git commit -a -m &lt;your-commit&gt;</code> 跳过使用暂存区提交已跟踪的文件。</p></li><li><p><code>.gitignore</code> 忽略文件配置文件。</p></li><li><p><code>git check-ignore -v &lt;file-path&gt;</code> 检查文件被哪条规则忽略。</p></li><li><p><code>git rm &lt;file-path&gt;</code> 移除文件（磁盘和暂存区）。</p></li><li><p><code>git rm --cached &lt;file-path&gt;</code> 仅从暂存区移除。</p></li><li><p><code>git mv &lt;file-from&gt; &lt;file-to&gt;</code> 移动/重命名文件。</p></li></ul><h3 id="撤销-重置操作"><a href="#撤销-重置操作" class="headerlink" title="撤销/重置操作"></a>撤销/重置操作</h3><ul><li><p><code>git commit --amend</code> 会将暂存区中的文件提交，修改提交信息并重新提交（一般用于修正上次提交失误）。</p></li><li><p><code>git reset [--mixed] &lt;commit-hash&gt; [&lt;file-path&gt;]</code> 重置提交树/文件。可用选项：</p><details><ul><li><p><code>--soft</code> 仅移动 HEAD 指针指向的分支提交，且更改会保留在暂存区，相当于撤销了上一次 <code>git commit</code> 命令。</p></li><li><p><code>--mixed</code> （默认选项），不仅会撤销上次提交，还会取消暂存所有更改，相当于回滚到了所有 <code>git add</code> 和 <code>git commit</code> 命令执行之前。</p></li><li><p><code>--hard</code> （<strong>危险操作</strong>），该命令会撤销提交、<code>git add</code> 、 <code>git commit</code> 的所有工作并强制覆盖工作区的文件，若被覆盖的文件未提交过则无法恢复。</p></li><li><p>使用文件路径：如运行 <code>git reset file.txt</code> （相当于 <code>git reset --mixed HEAD file.txt</code> ），本质上只是将 <code>file.txt</code> 从 HEAD 复制到索引（暂存区）中。它还有<strong>取消暂存文件</strong>的实际效果，与 <code>git add</code> 的行为正好相反。我们也可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本（如 <code>git reset eb43bf file.txt</code> 这样的命令）。</p></li></ul></details></li><li><p><code>git checkout -- &lt;file-path&gt;</code> （<strong>危险操作</strong>） Git 会丢弃你在本地对该文件的任何修改，并且用最近提交的版本覆盖掉它。</p></li></ul><blockquote><p>在 Git 中任何<strong>已提交</strong>的东西几乎总是可以恢复的。然而，任何你未提交的东西丢失后很可能再也找不到了。</p></blockquote><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p><code>git log</code> 按时间先后顺序列出所有的提交，最近的更新排在最上面。这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。该命令有许多选项：</p><h4 id="限制输出内容"><a href="#限制输出内容" class="headerlink" title="限制输出内容"></a>限制输出内容</h4><ul><li><p><code>-p 或 --patch</code> 按补丁格式显示每个提交引入的差异。</p></li><li><p><code>-stat</code> 显示每次提交的文件修改统计信息（被修改过的文件以及哪些行被移除或是添加了）。</p></li><li><p><code>--shortstat</code> 只显示 <code>--stat</code> 中最后的行数修改添加移除统计。</p></li><li><p><code>--name-only</code> 仅在提交信息后显示已修改的文件清单。</p></li><li><p><code>--name-status</code> 仅显示新增、修改、删除的文件清单。</p></li><li><p><code>--abbrev-commit</code> 仅显示 SHA-1 校验和的前 7 个字符（共 40 位）。</p></li><li><p><code>--relative-date</code> 使用较短的相对时间而不是完整格式显示日期（比如“2 weeks ago”）。</p></li><li><p><code>--graph</code> 在日志旁以 ASCII 图形显示分支与合并历史。</p></li><li><p><code>--color</code> 使用颜色（可在自定义提交记录中设置）。</p><details><summary>参数选项</summary><ul><li><p><code>always</code> 一直可使用颜色。</p></li><li><p><code>auto</code> 如果输出到终端，则使用颜色。</p></li><li><p><code>never</code> 不使用颜色。</p></li></ul></details></li></ul><li><p><code>--date</code> 设置日期格式。</p><details><summary>参数选项</summary><ul><li><p><code>iso</code> 以 ISO 8601 格式显示时间戳。</p></li><li><p><code>local</code> 以本地时区显示时间戳。</p></li><li><p><code>raw</code> 以 Git 内置格式显示时间戳（<code>%s %z</code>）。</p></li><li><p><code>relative</code> 以相对时间显示（距今多长时间）。</p></li><li><p><code>rfc</code> 以 RFC 2822 格式显示时间戳。</p></li><li><p><code>short</code> 只显示日期。</p></li></ul></details></li><li><p><code>--pretty</code> 使用其他格式显示历史提交信息。可用选项：</p><details><summary>参数选项</summary><ul><li><p><code>oneline</code> 将每个提交放在一行显示。</p></li><li><p><code>short</code>、<code>full</code>、<code>fuller</code> 展示信息的格式与 <code>git log</code> 基本一致，只是详尽程度不一。</p></li><li><p><code>format</code> 用来自定义提交记录的显示格式。常用选项：</p><ul><li><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>%H</code></td><td align="center">提交的完整哈希值</td></tr><tr><td align="center"><code>%h</code></td><td align="center">提交的简要哈希值</td></tr><tr><td align="center"><code>%T</code></td><td align="center">树的完整哈希值</td></tr><tr><td align="center"><code>%t</code></td><td align="center">树的简要哈希值</td></tr><tr><td align="center"><code>%P</code></td><td align="center">父提交的完整哈希值</td></tr><tr><td align="center"><code>%p</code></td><td align="center">父提交的简要哈希值</td></tr><tr><td align="center"><code>%an</code></td><td align="center">作者名字</td></tr><tr><td align="center"><code>%ae</code></td><td align="center">作者的电子邮件地址</td></tr><tr><td align="center"><code>%ad</code></td><td align="center">作者修订日期（可以用 <code>--date=</code>选项 来定制格式）</td></tr><tr><td align="center"><code>%ar</code></td><td align="center">作者修订日期（距今多长时间）</td></tr><tr><td align="center"><code>%cn</code></td><td align="center">提交者的名字</td></tr><tr><td align="center"><code>%ce</code></td><td align="center">提交者的电子邮件地址</td></tr><tr><td align="center"><code>%cd</code></td><td align="center">提交日期</td></tr><tr><td align="center"><code>%cr</code></td><td align="center">提交日期（距今多长时间）</td></tr><tr><td align="center"><code>%s</code></td><td align="center">提交说明</td></tr><tr><td align="center"><code>%d</code></td><td align="center">分支信息</td></tr><tr><td align="center"><code>%C(&lt;color&gt;)</code></td><td align="center">设置颜色</td></tr><tr><td align="center"><code>%Creset</code></td><td align="center">重置颜色</td></tr><tr><td align="center"><code>%n</code></td><td align="center">换行</td></tr></tbody></table></li><li><blockquote><p>其中作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。如：当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。</p></blockquote></li></ul></li></ul></details></li><li><p><code>--oneline</code> <code>--pretty=oneline --abbrev-commit</code>的简写。</p></li><h4 id="限制输出长度"><a href="#限制输出长度" class="headerlink" title="限制输出长度"></a>限制输出长度</h4><ul><li><code>-&lt;n&gt;</code> 限制显示的日志条目数量，例如使用 <code>-2</code> 选项来只显示最近的两次提交。</li></ul><h4 id="常用-log"><a href="#常用-log" class="headerlink" title="常用 log"></a>常用 log</h4><ul><li><p><code>git log --graph --abbrev-commit --color --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%ar)%Creset %C(bold blue)&lt;%an&gt;%Creset'</code></p></li><li><p><code>git log --graph --abbrev-commit --date=local --color --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%ad)%Creset %C(bold blue)&lt;%an&gt;%Creset'</code></p></li><li><p><code>git log --graph --abbrev-commit --color --pretty=format:'%C(bold white)%H %d%Creset%n %s %n%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)'</code></p></li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记 eslint+prettier 格式化 vue+typescript 项目的踩坑经历</title>
      <link href="/blog/2019/12/11/lint/eslint-prettier-ge-shi-hua-vue-typescript-xiang-mu/"/>
      <url>/blog/2019/12/11/lint/eslint-prettier-ge-shi-hua-vue-typescript-xiang-mu/</url>
      
        <content type="html"><![CDATA[<ul><li><p>项目：vue+typescript+eslint+prettier</p></li><li><p>环境：vscode</p></li><li><p>坑：eslint 保存无法自动格式化 vue 文件及 ts 文件</p></li><li><p>解决方案：配置 <code>settings.json</code> 文件</p></li></ul><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>最近使用 vue cli3 开始了一个新项目。不得不说 vue cli3 初始化项目比之前方便了不少，配置也精简了许多。</p><p>因为之前一直使用 eslint+prettier 作为格式化工具，表现也十分不错，所以这次一样使用了这对黄金搭档~</p><p>vue cli3 在初始化时一共提供了五个 lint 选项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  ESLint <span class="token keyword">with</span> error prevention only  ESLint <span class="token operator">+</span> Airbnb config  ESLint <span class="token operator">+</span> Standard config❯ ESLint <span class="token operator">+</span> Prettier  <span class="token function">TSLint</span> <span class="token punctuation">(</span>deprecated<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里还是推荐 eslint+prettier 吧，可以更好地自定义规则，虽然 airbnb 也十分不错。顺带一提，tslint 官方已经打算废弃 tslint 投奔 eslint 怀抱了，不过 tslint 的语法检查以及格式化功能确实还是 eslint 好用，所以。。</p><h2 id="配置-eslint-与-prettier"><a href="#配置-eslint-与-prettier" class="headerlink" title="配置 eslint 与 prettier"></a>配置 eslint 与 prettier</h2><p>配置这块也很简单，初始化的项目里就有了 <code>.eslintrc.js</code> 文件，只要在里面的 <code>rules</code> 属性里填上自己的规则就行。prettier 的配置则需要自己再根目录新建一个 <code>prettier.config.js</code> 文件，在 <code>module.exports = {}</code> 中写入规则就行。</p><p>然后就是在<code>settings.json</code> 文件中配置 eslint 保存时自动格式化，这个一直都是开启的所以我就没去检查（当然这个选项仍是开启的）。当然如果没安装 vscode 的两个插件得先装一下。</p><h2 id="坑的表象"><a href="#坑的表象" class="headerlink" title="坑的表象"></a>坑的表象</h2><p>接下来就是令人费解的现象了。</p><p>按了 cmd+S，一模一样的 lint 配置，在其他 js 项目中正常运行，在这里却无法自动格式化。而 alt+shift+F 的 prettier 格式化却能正常工作，并且应用的规则确实为我项目中配置的，但这并不能满足我的格式化需求。</p><p><strong>更关键的是，代码中不规范的地方并没有被 eslint 标红。</strong></p><h2 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h2><p>这个时候问题已经很明显了，eslint 并没有在 ts 文件中被启用。</p><p>并且当我 F1 执行 <code>ESlint: Fix all auto-fixable Problems</code> 的时候，vscode 给出了这样的警告：</p><p><img src="https://gitee.com/xiamu33/img/raw/master/img/2021/10/07/eslint-prettier-1.png" alt="eslint 插件警告"></p><p>问题在于 <code>settings.json</code> 中没有对 vue 文件及 ts 文件开启 eslint 验证，接下来只要设置好配置文件就行了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 <code>settings.json</code> 配置文件中（建议在工作区中配置）添加：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token comment">// ... other config</span>    <span class="token string">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"javascript"</span><span class="token punctuation">,</span>        <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>        <span class="token string">"vue"</span><span class="token punctuation">,</span>        <span class="token string">"typescript"</span><span class="token punctuation">,</span>        <span class="token string">"typescriptreact"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样确实能开启 eslint 的验证，但是无法启用格式化，需要把配置改为：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token comment">// ... other config</span>    <span class="token string">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"javascript"</span><span class="token punctuation">,</span>        <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>            <span class="token string">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"language"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>            <span class="token string">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"language"</span><span class="token operator">:</span> <span class="token string">"typescriptreact"</span><span class="token punctuation">,</span>            <span class="token string">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为 eslint 默认启用对 javascript 语言的格式化，所以不需要单独配置。</p><h2 id="关于-eslint-与-prettier-配置的冲突"><a href="#关于-eslint-与-prettier-配置的冲突" class="headerlink" title="关于 eslint 与 prettier 配置的冲突"></a>关于 eslint 与 prettier 配置的冲突</h2><h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><p>对于相同的代码，部分 eslint 与 prettier 规则验证会同时生效，导致重复格式化，比如：</p><p><img src="https://gitee.com/xiamu33/img/raw/master/img/2021/10/07/eslint-prettier-2.png" alt="eslint 与 prettier 验证同时生效"></p><p>cmd+S 保存之后：</p><p><img src="https://gitee.com/xiamu33/img/raw/master/img/2021/10/07/eslint-prettier-3.png" alt="eslint 与 prettier 格式化后"></p><p>因为 eslint 和 prettier 的格式化功能同时生效了。这个时候就需要再次保存，把多余的空格删除。遇到其他复杂情况甚至需要多次保存。</p><p>显然这样操作太过繁琐。。</p><p>prettier 一直都以”武断“著称，其提供的配置也是少得可怜，而且同一配置会在不同地方发挥作用，所以去修改 prettier 的配置并不是明智的选择。</p><p>虽然可以像这样在 eslint 的 <code>rules</code> 中配置忽略部分 prettier 的功能：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ... other config</span>rules<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// ... other rules</span>    <span class="token string">"prettier/prettier"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      bracketSpacing<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是其结果会导致类似这样的情况无法被格式化：</p><p><img src="https://gitee.com/xiamu33/img/raw/master/img/2021/10/07/eslint-prettier-4.png" alt="eslint 与 prettier 部分未格式化"></p><p>所以可取的方法只有忽略 eslint 中与 prettier 功能相同的规则。</p><p>幸运的是，已经有人替我们做了这些工作。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>可以通过 <code>eslint-config-prettier</code> 配置，关闭 eslint 中与 prettier 冲突的选项，这样同一个地方就不会再看到两个 error 或 warn。配置也十分简单：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .eslintrc.js</span><span class="token punctuation">{</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// ...</span>    <span class="token string">"prettier"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过使用 vue cli3 初始化项目时选择了 eslint+prettier lint 选项时，vue 会自动安装好 <code>@vue/eslint-config-prettier</code> 等插件，并自动配置好：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .eslintrc.js</span><span class="token punctuation">{</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/prettier"</span><span class="token punctuation">,</span>    <span class="token string">"@vue/typescript"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@vue/eslint-config-prettier</code> 内部已经帮我们处理了 prettier 与 eslint 以及 eslint-plugin-vue 插件之间的冲突。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @vue/eslint-config-prettier</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>    require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"eslint-config-prettier"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"eslint-config-prettier/vue"</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  rules<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"prettier/prettier"</span><span class="token operator">:</span> <span class="token string">"warn"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@vue/eslint-config-typescript</code> 也差不多，帮我们进行了简单配置，顺便提示我们可以使用 <code>@typescript-eslint/...</code> 这样的形式修改规则。不过该插件必须同 eslint-plugin-vue 一并使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @vue/eslint-config-typescript</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@typescript-eslint"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// Prerequisite `eslint-plugin-vue`, being extended, sets</span>  <span class="token comment">// root property `parser` to `'vue-eslint-parser'`, which, for code parsing,</span>  <span class="token comment">// in turn delegates to the parser, specified in `parserOptions.parser`:</span>  <span class="token comment">// https://github.com/vuejs/eslint-plugin-vue#what-is-the-use-the-latest-vue-eslint-parser-error</span>  parserOptions<span class="token operator">:</span> <span class="token punctuation">{</span>    parser<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  rules<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// https://typescript-eslint.io/parser</span>    <span class="token string">"no-undef"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"no-unused-vars"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token comment">// https://github.com/typescript-eslint/typescript-eslint/issues/46</span>    <span class="token comment">// '@typescript-eslint/no-unused-vars': 'error',</span>    <span class="token comment">// temporary fix for https://github.com/vuejs/vue-cli/issues/1922</span>    <span class="token comment">// very strange as somehow this rule gets different behaviors depending</span>    <span class="token comment">// on the presence of @typescript-eslint/parser...</span>    strict<span class="token operator">:</span> <span class="token string">"off"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>如果使用 vue cli3 初始化 vue 项目，建议 lint 选项选择 eslint+prettier，这样可以省掉一些配置的时间，需要其他 standard 或 airbnb 也可以自行安装。对于有官方提供 vue 版本的插件（如 <code>@vue/eslint-config-prettier</code> ），建议直接使用 vue 官方插件，可以节省很多处理冲突时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> eslint </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用命令</title>
      <link href="/blog/2019/11/24/git/git-chang-yong-ming-ling-xiang-jie/"/>
      <url>/blog/2019/11/24/git/git-chang-yong-ming-ling-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="运行前配置"><a href="#运行前配置" class="headerlink" title="运行前配置"></a>运行前配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>git 自带了一个 <code>git config</code> 工具来帮助设置 git 外观和行为的配置。这些配置分别存储在三个不同的位置：</p><ol><li><p><code>${prefix}/etc/gitconfig</code> 文件：系统上每个用户及其仓库的通用配置。使用 <code>git config --system</code> 选项时，会从该文件读写配置。</p></li><li><p><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。通过 <code>git config --global</code> 读写该文件。</p></li><li><p><code>.git/config</code> 文件：即当前仓库 git 目录中的配置文件，仅针对该仓库。通过 <code>git config --local</code> 读写该文件。</p></li></ol><p>配置优先级依次为：3 &gt; 2 &gt; 1。</p><p>通过 <code>git config --list [--system|--global|--local]</code> 命令来查看对应的配置变量。</p><p>你可能会看到重复的变量名，因为 git 会从不同文件中读取同一个配置。这种情况下，git 会使用它找到的每一个相同变量的最后一个配置。</p><p><strong>若无法在对应目录找到配置文件，可执行 <code>git config --list --show-origin</code> 来查看每个配置变量所在文件。</strong></p><blockquote><p>注：[]中为可选项，下同。</p></blockquote><h3 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h3><p>安装完 git 后第一件事就是设置你的用户名和邮箱地址。因为每次 git 提交都会使用这些信息，并且会写入每次的提交中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"xiamu"</span>$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"xiamu@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><p>当使用 git 时需要获取帮助时，有三种方法可以找到 git 命令的使用手册：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git help <span class="token operator">&lt;</span>verb<span class="token operator">&gt;</span>$ git <span class="token operator">&lt;</span>verb<span class="token operator">&gt;</span> <span class="token operator">--</span>help <span class="token comment">// 这里一定要用--help，使用-h会被git理解为输入选项</span>$ man git<span class="token operator">-</span><span class="token operator">&lt;</span>verb<span class="token operator">&gt;</span> <span class="token comment">// 这个方法无法查询git别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>例如：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git help clone<span class="token constant">GIT</span><span class="token operator">-</span><span class="token constant">CLONE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                         Git Manual                                         <span class="token constant">GIT</span><span class="token operator">-</span><span class="token constant">CLONE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token constant">NAME</span>       git<span class="token operator">-</span>clone <span class="token operator">-</span> Clone a repository into a <span class="token keyword">new</span> <span class="token class-name">directory</span><span class="token constant">SYNOPSIS</span>       git clone <span class="token punctuation">[</span><span class="token operator">--</span>template<span class="token operator">=</span><span class="token operator">&lt;</span>template_directory<span class="token operator">&gt;</span><span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">-</span>l<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>s<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>no<span class="token operator">-</span>hardlinks<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>q<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>n<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>bare<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>mirror<span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">-</span>o <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>b <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>u <span class="token operator">&lt;</span>upload<span class="token operator">-</span>pack<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>reference <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span><span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>dissociate<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>separate<span class="token operator">-</span>git<span class="token operator">-</span>dir <span class="token operator">&lt;</span>git dir<span class="token operator">&gt;</span><span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>depth <span class="token operator">&lt;</span>depth<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">[</span>no<span class="token operator">-</span><span class="token punctuation">]</span>single<span class="token operator">-</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>no<span class="token operator">-</span>tags<span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>recurse<span class="token operator">-</span>submodules<span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>pathspec<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">[</span>no<span class="token operator">-</span><span class="token punctuation">]</span>shallow<span class="token operator">-</span>submodules<span class="token punctuation">]</span>                 <span class="token punctuation">[</span><span class="token operator">--</span>jobs <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>directory<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git co <span class="token operator">--</span>help <span class="token comment">// 这里'co'被事先定义成了'checkout'的别名</span><span class="token string">'co'</span> is aliased to <span class="token string">'checkout'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ man git<span class="token operator">-</span>checkout <span class="token comment">// 正常提示</span><span class="token constant">GIT</span><span class="token operator">-</span><span class="token constant">CHECKOUT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                      Git Manual                                      <span class="token constant">GIT</span><span class="token operator">-</span><span class="token constant">CHECKOUT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token constant">NAME</span>       git<span class="token operator">-</span>checkout <span class="token operator">-</span> Switch branches or restore working tree files<span class="token constant">SYNOPSIS</span>       git checkout <span class="token punctuation">[</span><span class="token operator">-</span>q<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>m<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span><span class="token punctuation">]</span>       git checkout <span class="token punctuation">[</span><span class="token operator">-</span>q<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>m<span class="token punctuation">]</span> <span class="token operator">--</span>detach <span class="token punctuation">[</span><span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span><span class="token punctuation">]</span>       git checkout <span class="token punctuation">[</span><span class="token operator">-</span>q<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>m<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>detach<span class="token punctuation">]</span> <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span>       git checkout <span class="token punctuation">[</span><span class="token operator">-</span>q<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>m<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span>b<span class="token operator">|</span><span class="token operator">-</span><span class="token constant">B</span><span class="token operator">|</span><span class="token operator">--</span>orphan<span class="token punctuation">]</span> <span class="token operator">&lt;</span>new_branch<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>start_point<span class="token operator">&gt;</span><span class="token punctuation">]</span>       git checkout <span class="token punctuation">[</span><span class="token operator">-</span>f<span class="token operator">|</span><span class="token operator">--</span>ours<span class="token operator">|</span><span class="token operator">--</span>theirs<span class="token operator">|</span><span class="token operator">-</span>m<span class="token operator">|</span><span class="token operator">--</span>conflict<span class="token operator">=</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>tree<span class="token operator">-</span>ish<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>paths<span class="token operator">&gt;</span><span class="token operator">...</span>       git checkout <span class="token punctuation">[</span><span class="token operator">&lt;</span>tree<span class="token operator">-</span>ish<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>pathspec<span class="token operator">&gt;</span><span class="token operator">...</span>       git <span class="token function">checkout</span> <span class="token punctuation">(</span><span class="token operator">-</span>p<span class="token operator">|</span><span class="token operator">--</span>patch<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>tree<span class="token operator">-</span>ish<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>paths<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ man git<span class="token operator">-</span>co <span class="token comment">// 无法识别git别名</span>No manual entry <span class="token keyword">for</span> git<span class="token operator">-</span>co<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="git-基础"><a href="#git-基础" class="headerlink" title="git 基础"></a>git 基础</h2><h3 id="获取-git-仓库"><a href="#获取-git-仓库" class="headerlink" title="获取 git 仓库"></a>获取 git 仓库</h3><h4 id="克隆现有仓库"><a href="#克隆现有仓库" class="headerlink" title="克隆现有仓库"></a>克隆现有仓库</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git clone git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>xiamu33<span class="token operator">/</span>my<span class="token operator">-</span>project<span class="token punctuation">.</span>git my<span class="token operator">-</span>local<span class="token operator">-</span>project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令默认会在本地当前目录下创建一个名为 <code>my-local-project</code> 的目录（如果省略该选项，则目录名为<code>my-project</code> ），并初始化一个 <code>.git</code> 文件夹，并从远程仓库拉取所有数据放入 <code>.git</code> 文件夹，然后从中读取最新版本的文件拷贝。</p><p>git 克隆的是该 git 仓库上几乎所有的数据。如果你的服务器磁盘坏了，通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库。</p><h4 id="在现有目录中初始化仓库"><a href="#在现有目录中初始化仓库" class="headerlink" title="在现有目录中初始化仓库"></a>在现有目录中初始化仓库</h4><p>在项目根目录中执行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令会创建一个名为 <code>.git</code> 的子目录，这个子目录中含有初始化的 git 仓库中所有的必须文件。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p><code>git clone &lt;url&gt; [&lt;local-project-name&gt;]</code> 从远程服务器克隆仓库至本地目录名下。</p></li><li><p><code>git init</code> 初始化本地仓库。</p></li></ul><h3 id="远程仓库使用"><a href="#远程仓库使用" class="headerlink" title="远程仓库使用"></a>远程仓库使用</h3><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><p>在已跟踪远程仓库的本地仓库目录中执行 <code>git remote [show]</code> 命令，会列出你指定的远程服务器的简写。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git remote <span class="token comment">// 远程仓库服务器的默认名字即为origin 选项show可以省略</span>origin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>指定选项 <code>-v</code> 或 <code>--verbose</code> ，会显示需要读写远程仓库使用的 git 保存的简写及其对应的 url。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git remote <span class="token operator">-</span>vorigin  git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>xiamu33<span class="token operator">/</span>blog<span class="token punctuation">.</span><span class="token function">git</span> <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin  git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>xiamu33<span class="token operator">/</span>blog<span class="token punctuation">.</span><span class="token function">git</span> <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>执行 <code>git remote add &lt;short-name&gt; &lt;url&gt;</code> 添加一个新的远程 git 仓库。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git remoteorigin$ git remote add repo https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>xiamu33<span class="token operator">/</span>blog<span class="token punctuation">.</span>git$ git remote <span class="token operator">-</span>vorigin  git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>xiamu33<span class="token operator">/</span>blog<span class="token punctuation">.</span><span class="token function">git</span> <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin  git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>xiamu33<span class="token operator">/</span>blog<span class="token punctuation">.</span><span class="token function">git</span> <span class="token punctuation">(</span>push<span class="token punctuation">)</span>repo   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>xiamu33<span class="token operator">/</span>blog<span class="token punctuation">.</span><span class="token function">git</span> <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>repo   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>xiamu33<span class="token operator">/</span>blog<span class="token punctuation">.</span><span class="token function">git</span> <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重命名与删除远程仓库"><a href="#重命名与删除远程仓库" class="headerlink" title="重命名与删除远程仓库"></a>重命名与删除远程仓库</h4><p>执行 <code>git remote rename &lt;old-name&gt; &lt;new-name&gt;</code> 可修改一个远程仓库的简写名。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git remote rename repo https$ git remoteoriginhttps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，这样也会修改远程分支的名字，原来跟踪 <code>repo/master</code> 的分支现在会跟踪 <code>https/master</code> 。</p><p>执行<code>git remote rm &lt;remote-name&gt;</code> 可删除一个远程仓库。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git remote rm httpsorigin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="从远程仓库抓取与拉取"><a href="#从远程仓库抓取与拉取" class="headerlink" title="从远程仓库抓取与拉取"></a>从远程仓库抓取与拉取</h4><p>执行<code>git fetch [&lt;remote-name&gt;]</code> 可从远程仓库中获得数据。</p><p><code>git fetch</code> 命令会将数据抓取到你的本地仓库，但不会自动合并或修改你当前的工作。你必须手动将其合并入你的工作。</p><p>如果你的本地分支已跟踪一个远程分支，执行 <code>git pull</code> 命令来自动拉取然后合并远程分支到当前分支。</p><p>或者执行<code>git pull [&lt;remote-name&gt; &lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</code> 拉取指定远程分支，省略本地分支<code>&lt;local-branch-name&gt;</code>选项则拉取至远程分支同名分支，若无本地同名分支则新建该分支。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git pull https master<span class="token operator">:</span>devFrom https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>xiamu33<span class="token operator">/</span>blog <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">branch</span><span class="token punctuation">]</span>      master     <span class="token operator">-</span><span class="token operator">&gt;</span> devAlready up to date<span class="token punctuation">.</span>$ git branch <span class="token operator">-</span>vv <span class="token comment">// 注意：新建的本地分支并不会自动跟踪远程分支</span>  dev    <span class="token number">363</span>cfc9 first commit<span class="token operator">*</span> master <span class="token number">363</span>cfc9 <span class="token punctuation">[</span>origin<span class="token operator">/</span>master<span class="token punctuation">]</span> first commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，可执行<code>git branch --set-upstream-to=&lt;remote-name&gt;/&lt;branch-name&gt;</code> 让本地分支<strong>跟踪远程分支</strong>，之后可直接执行<code>pull</code> <code>push</code> 拉取或推送分支。</p><h4 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h4><p>执行<code>git push [&lt;remote-name&gt; &lt;local-branch-name&gt;[:&lt;remote-branch-name&gt;]]</code> 可以将本地分支推送至指定远程仓库的指定分支。</p><p>若省略<code>&lt;remote-branch-name&gt;</code> 选项，则推送至本地分支同名远程分支，若指定本地不存在，则会报错；若指定远程分支不存在，则会创建一个远程分支。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git push https master2<span class="token operator">:</span>mastererror<span class="token operator">:</span> src refspec master2 does not match any<span class="token punctuation">.</span>error<span class="token operator">:</span> failed to push some refs to <span class="token string">'https://github.com/xiamu33/blog.git'</span>$ git push https master<span class="token operator">:</span>devTotal <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote<span class="token operator">:</span>remote<span class="token operator">:</span> Create a pull request <span class="token keyword">for</span> <span class="token string">'dev'</span> on GitHub by visiting<span class="token operator">:</span>remote<span class="token operator">:</span>      https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>xiamu33<span class="token operator">/</span>blog<span class="token operator">/</span>pull<span class="token operator">/</span><span class="token keyword">new</span><span class="token operator">/</span>devremote<span class="token operator">:</span>To https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>xiamu33<span class="token operator">/</span>blog<span class="token punctuation">.</span>git <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">branch</span><span class="token punctuation">]</span>      dev <span class="token operator">-</span><span class="token operator">&gt;</span> dev$ git branch <span class="token operator">-</span>r <span class="token comment">// 查看远程分支 同git branch --remotes</span>https<span class="token operator">/</span>devhttps<span class="token operator">/</span>masterorigin<span class="token operator">/</span>master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的本地分支已跟踪一个远程分支，可省略后面的选项执行 <code>git push</code> 推送至远程仓库。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><p><code>git remote [show]</code> 查看远程仓库的简写。</p></li><li><p><code>git remote -v</code> 查看远程仓库的简写及其对应的 url。</p></li><li><p><code>git remote add &lt;short-name&gt; &lt;url&gt;</code> 添加远程仓库。</p></li><li><p><code>git remote rename &lt;old-name&gt; &lt;new-name&gt;</code> 重命名远程仓库（也会修改远程分支的名字）。</p></li><li><p><code>git remote rm &lt;remote-name&gt;</code> 删除远程仓库。</p></li><li><p><code>git fetch [&lt;remote-name&gt;]</code> 从远程仓库抓取数据（不会合并入本地工作）。</p></li><li><p><code>git pull [&lt;remote-name&gt; &lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</code> 拉取指定远程分支数据至指定（或同名）本地分支，省略所有选项则拉取已跟踪远程分支数据。</p></li><li><p><code>git branch --set-upstream-to=&lt;remote-name&gt;/&lt;branch-name&gt;</code> 让本地分支跟踪远程分支。</p></li><li><p><code>git push [&lt;remote-name&gt; &lt;local-branch-name&gt;[:&lt;remote-branch-name&gt;]]</code> 推送至远程仓库。</p></li><li><p><code>git branch -r</code> 查看远程分支。</p></li></ul><h3 id="记录每次更新"><a href="#记录每次更新" class="headerlink" title="记录每次更新"></a>记录每次更新</h3><p>git 文件的生命周期如下图：</p><p><img src="https://gitee.com/xiamu33/img/raw/master/img/2021/10/07/git-lifecycle.png" alt="git 生命周期"></p><h4 id="查看当前文件状态"><a href="#查看当前文件状态" class="headerlink" title="查看当前文件状态"></a>查看当前文件状态</h4><p>执行<code>git status</code> 可查看当前文件的详细状态。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git statusOn branch masterYour branch is ahead <span class="token keyword">of</span> <span class="token string">'origin/master'</span> by <span class="token number">1</span> commit<span class="token punctuation">.</span>  <span class="token punctuation">(</span>use <span class="token string">"git push"</span> to publish your local commits<span class="token punctuation">)</span>Changes to be committed<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>       modified<span class="token operator">:</span>   <span class="token punctuation">.</span>markdownlint<span class="token punctuation">.</span>json       modified<span class="token operator">:</span>   article<span class="token operator">/</span>git常用命令详解<span class="token punctuation">.</span>md       <span class="token keyword">new</span> <span class="token class-name">file</span><span class="token operator">:</span>   img<span class="token operator">/</span>lifecycle<span class="token punctuation">.</span>pngChanges not staged <span class="token keyword">for</span> commit<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>       modified<span class="token operator">:</span>   <span class="token constant">README</span><span class="token punctuation">.</span>md       modified<span class="token operator">:</span>   article<span class="token operator">/</span>git常用命令详解<span class="token punctuation">.</span>mdUntracked files<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>       <span class="token punctuation">.</span>gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>git status -s</code> 或 <code>git status --short</code> 将输出更为紧凑的状态信息。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git status <span class="token operator">-</span>s<span class="token constant">M</span>  <span class="token punctuation">.</span>markdownlint<span class="token punctuation">.</span>json <span class="token constant">M</span> <span class="token constant">README</span><span class="token punctuation">.</span>md<span class="token constant">MM</span> article<span class="token operator">/</span>git常用命令详解<span class="token punctuation">.</span>md<span class="token constant">A</span>  img<span class="token operator">/</span>lifecycle<span class="token punctuation">.</span>png<span class="token operator">??</span> <span class="token punctuation">.</span>gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>??</code> 标记：新添加的未跟踪的文件。</p></li><li><p><code>A</code> 标记：新添加到暂存区中的文件。</p></li><li><p><code>M</code> 标记：修改过的文件。出现在右表示该文件被修改了但未放入暂存区；出现在左表示该文件被修改了并且放入了暂存区；左右都出现表示该文件被修改了，一部分修改已被放入暂存区，另一部分还没有。</p></li><li><p><code>D</code> 标记：已删除的文件。</p></li></ul><h4 id="跟踪暂存文件"><a href="#跟踪暂存文件" class="headerlink" title="跟踪暂存文件"></a>跟踪暂存文件</h4><p>执行 <code>git add &lt;file-name&gt;</code> 跟踪一个新文件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git add <span class="token constant">README</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将会跟踪 <code>README.md</code> 文件，并暂存至暂存区。</p><p><code>git add</code> 如果使用目录的路径作为参数，该命令将递归地跟踪该目录下的所有文件。如：<code>git add .</code> 会跟踪并暂存当前目录层级下所有文件（被忽略的文件除外）。</p><h4 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h4><p>通过 <code>git status</code> 我们可以查看当前哪些更新文件还没有暂存，哪些文件已经暂存准备下次提交，但只限文件名。</p><p>知道具体修改了什么地方，可以执行 <code>git diff</code> 命令，该命令将通过文件补丁的格式显示具体哪些行发生了改变。</p><p>编辑的文件不暂存，执行 <code>git status</code> 命令会看到：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git statusOn branch masterYour branch is up to date <span class="token keyword">with</span> <span class="token string">'origin/master'</span><span class="token punctuation">.</span>Changes not staged <span class="token keyword">for</span> commit<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>       modified<span class="token operator">:</span>   <span class="token constant">README</span><span class="token punctuation">.</span>mdno changes added to <span class="token function">commit</span> <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and<span class="token operator">/</span>or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 <code>git diff</code> ：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git diffdiff <span class="token operator">--</span>git a<span class="token operator">/</span><span class="token constant">README</span><span class="token punctuation">.</span>md b<span class="token operator">/</span><span class="token constant">README</span><span class="token punctuation">.</span>mdindex a093180<span class="token punctuation">.</span><span class="token punctuation">.</span>cba457d <span class="token number">100644</span><span class="token operator">--</span><span class="token operator">-</span> a<span class="token operator">/</span><span class="token constant">README</span><span class="token punctuation">.</span>md<span class="token operator">++</span><span class="token operator">+</span> b<span class="token operator">/</span><span class="token constant">README</span><span class="token punctuation">.</span>md@@ <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span> @@ ## git 相关<span class="token operator">+</span><span class="token operator">+</span><span class="token operator">-</span> <span class="token punctuation">[</span>git 常用命令详解<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>article<span class="token operator">/</span>git常用命令详解<span class="token punctuation">.</span>md<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。</p><p>若要查看已暂存的将要添加到下次提交的更改，可以执行 <code>git diff --cached</code> 命令（或者 git &gt;= 1.6.1 版本所提供的 <code>git diff --staged</code> ）。</p><p><strong>需要注意的是，<code>git diff</code> 本身只显示已跟踪文件中尚未暂存的改动，而不是自上次提交以来所做的所有改动。</strong></p><blockquote><p><code>git difftool</code> 命令可以将文件差异通过图形化的方式输出结果，使用文件名或目录路径作为参数，可以查看指定文件的改动。执行 <code>git difftool --tool-help</code> 命令查看你的系统支持哪些 Git Diff 插件。</p></blockquote><h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p>当所有修改的文件都 <code>git add</code> 到暂存区准备提交后，就可以执行 <code>git commit</code> 命令。</p><p>不加任何参数执行 <code>git commit</code> 命令会启动文本编辑器以便输入本次提交的说明，一般都是 vim 或 emacs。也可以执行 <code>git config --global core.editor</code> 命令设定编辑软件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git commit# Please enter the commit message <span class="token keyword">for</span> your changes<span class="token punctuation">.</span> Lines starting# <span class="token keyword">with</span> <span class="token string">'#'</span> will be ignored<span class="token punctuation">,</span> and an empty message aborts the commit<span class="token punctuation">.</span>## On branch master# Your branch is up to date <span class="token keyword">with</span> <span class="token string">'origin/master'</span><span class="token punctuation">.</span>## Changes to be committed<span class="token operator">:</span>#       modified<span class="token operator">:</span>   article<span class="token operator">/</span>git常用命令详解<span class="token punctuation">.</span>md#<span class="token operator">~</span><span class="token operator">~</span><span class="token string">"~/Documents/blog/.git/COMMIT_EDITMSG"</span> <span class="token number">13</span>L<span class="token punctuation">,</span> <span class="token number">367</span>C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认的提交消息有一段注释，并包含最后一次执行 <code>git status</code> 的输出。如果想要知道更详细的修改提示，可以使用 <code>-v</code> 选项。输入完提交说明退出编辑器时，git 会丢掉注释行，用你输入的提交信息生成一次提交。</p><p>另外，可以使用 <code>-m</code> 选项，后面加上提交说明，可以直接生成一次提交。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git commit <span class="token operator">-</span>m <span class="token string">"add git: 基础用法更新"</span><span class="token punctuation">[</span>master <span class="token number">2</span>f2a8fa<span class="token punctuation">]</span> add git<span class="token operator">:</span> 基础用法更新 <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">88</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在已经成功创建一个提交。提交后的输出会告诉你，当前是在哪个分支提交的（<code>master</code>），本次提交的部分 SHA-1 校验和是什么（<code>2f2a8fa</code>），本次提交有多少文件修订过，多少行添加和删改过。</p><p>请记住，提交时记录的是放在暂存区域的快照。 任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。</p><h5 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h5><p>尽管使用暂存区域的方式可以精心准备要暂存的细节，但每次都这么操作也略显繁琐。git 提供了一个跳过使用暂存区域的方式，就是在 <code>git commit</code> 后面加上 <code>-a</code> 选项（需在 <code>-m</code> 之前），这样 git 就会自动把修改中已经跟踪过的文件暂存起来一并提交，跳过手动 <code>git add</code> 步骤。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git statusOn branch masterChanges not staged <span class="token keyword">for</span> commit<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>        modified<span class="token operator">:</span>   <span class="token constant">README</span><span class="token punctuation">.</span>mdno changes added to <span class="token function">commit</span> <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and<span class="token operator">/</span>or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span>$ git commit <span class="token operator">-</span>a <span class="token operator">-</span>m <span class="token string">"modify README"</span><span class="token punctuation">[</span>master <span class="token number">1</span>d5ef89<span class="token punctuation">]</span> modify <span class="token constant">README</span> <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，新添加的文件（即之前未跟踪的文件）并不会被自动暂存起来，仍需要手动 <code>git add</code> 。觉得繁琐可以通过设置 git 别名快速提交，git 别名会在后面详细提到。</p><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>一般我们总有些文件不想纳入 git 管理，也不希望它们总出现在未跟踪文件列表。比如日志文件，或者编译过程中创建的临时文件等。在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件模式。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li><p>所有空行或者以<code>＃</code>开头的行都会被 Git 忽略。</p></li><li><p>可以使用标准的 glob 模式匹配。</p></li><li><p>匹配模式可以以（<code>/</code>）开头防止递归。</p></li><li><p>匹配模式可以以（<code>/</code>）结尾指定目录。</p><ul><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li></ul></li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。</p><p><code>*</code> 匹配零个或多个任意字符；</p><p><code>[abc]</code> 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）。如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如<code>[0-9]</code>表示匹配所有 0 到 9 的数字）。</p><p><code>?</code> 只匹配一个任意字符；</p><p><code>**</code> 表示匹配任意中间目录，比如<code>a/**/z</code>可以匹配<code>a/z</code>,<code>a/b/z</code>或<code>a/b/c/z</code>等。</p><p>如果有一个文件你不想忽略却意外被 git 忽略了，这时可以执行 <code>git check-ignore</code> 命令检查被那条规则忽略了。选项 <code>-v</code> 可以输出匹配模式的详细信息。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git check<span class="token operator">-</span>ignore <span class="token operator">-</span>v <span class="token punctuation">.</span>DS_Store<span class="token punctuation">.</span>gitignore<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">.</span>DS_Store  <span class="token punctuation">.</span>DS_Store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该输出说明 <code>.DS_Store</code> 文件是被 <code>.gitignore</code> 文件中第一行的 <code>.DS_Store</code> 规则忽略的。</p><h4 id="移除-移动文件"><a href="#移除-移动文件" class="headerlink" title="移除/移动文件"></a>移除/移动文件</h4><h5 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h5><p>如果要从 git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以执行 <code>git rm</code> 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p><p>但是如果只是单纯的从工作目录中删除文件，执行 <code>git status</code> 时会显示“Changes not staged for commit”（未暂存）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ rm <span class="token constant">README</span><span class="token punctuation">.</span>md$ git statusOn branch masterChanges not staged <span class="token keyword">for</span> commit<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git add/rm &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>        deleted<span class="token operator">:</span>    <span class="token constant">README</span><span class="token punctuation">.</span>mdno changes added to <span class="token function">commit</span> <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and<span class="token operator">/</span>or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候需要运行 <code>git rm</code> 或者 <code>git add</code> 操作记录移除文件操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git rm <span class="token constant">README</span><span class="token punctuation">.</span>mdrm <span class="token string">'README.md'</span>$ git statusOn branch masterChanges to be committed<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>        deleted<span class="token operator">:</span>    <span class="token constant">README</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一次提交时，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，想要强制删除则必须要用强制删除选项 <code>-f</code> 了，但是这样没有添加到快照中的数据无法被 git 恢复。</p><h5 id="仅从暂存区移除"><a href="#仅从暂存区移除" class="headerlink" title="仅从暂存区移除"></a>仅从暂存区移除</h5><p>当你想把文件从 git 仓库中删除（即让 git 取消跟踪），但是仍要保留在当前目录中。比如在忘记添加 <code>.gitignore</code> 文件时，将一堆日志文件添加到了暂存区，这时候可以使用 <code>--cached</code> 选项。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git rm <span class="token operator">--</span>cached <span class="token constant">README</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git rm</code> 命令后面可以列出文件或者目录的名字，也可以使用<code>glob</code>模式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git rm log<span class="token operator">/</span>\<span class="token operator">*</span><span class="token punctuation">.</span>log$ git rm <span class="token operator">--</span>cached log<span class="token operator">/</span>\<span class="token operator">*</span><span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意星号 <code>*</code> 前的 <code>\</code> 符号， 因为 git 有自己的文件模式扩展匹配方式，所以不需要用 shell 来帮忙展开（当然不加 <code>\</code> 符号也是可以的），此命令删除 <code>log/</code> 目录下所有扩展名为 <code>.log</code> 的文件以及取消 git 对<code>log/</code> 目录下所有扩展名为 <code>.log</code> 的文件的跟踪。</p><h5 id="移动-重命名文件"><a href="#移动-重命名文件" class="headerlink" title="移动/重命名文件"></a>移动/重命名文件</h5><p>在 git 中移动和重命名文件操作是一致的。可以执行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git mv <span class="token operator">&lt;</span>file<span class="token operator">-</span>from<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>file<span class="token operator">-</span>to<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git 会如预期般正常工作，认为这是一次重命名操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ git mv <span class="token constant">README</span><span class="token punctuation">.</span>md <span class="token punctuation">.</span><span class="token operator">/</span>article<span class="token operator">/</span><span class="token constant">README</span>$ git statusOn branch masterChanges to be committed<span class="token operator">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>        renamed<span class="token operator">:</span>    <span class="token constant">README</span><span class="token punctuation">.</span>md <span class="token operator">-</span><span class="token operator">&gt;</span> article<span class="token operator">/</span><span class="token constant">README</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，执行 <code>git mv README.md ./article/README</code> 相当于执行了三条命令：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ mv <span class="token constant">README</span><span class="token punctuation">.</span>md <span class="token punctuation">.</span><span class="token operator">/</span>article<span class="token operator">/</span><span class="token constant">README</span>$ git rm <span class="token constant">README</span><span class="token punctuation">.</span>md$ git add <span class="token punctuation">.</span><span class="token operator">/</span>article<span class="token operator">/</span><span class="token constant">README</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li><p><code>git status</code> 查看当前文件详细状态； <code>git status -s</code> 查看简要状态。</p></li><li><p><code>git add &lt;file-name&gt;</code> 跟踪暂存文件； <code>git add .</code> 跟踪并暂存当前目录层级下所有文件（被忽略的文件除外）。</p></li><li><p><code>git diff</code> 查看工作目录文件相对暂存去的修改； <code>git diff --cached</code> 或者 <code>git diff --staged</code> 查看暂存区文件相对上次提交的修改。</p></li><li><p><code>git commit</code> 将暂存区文件提交更新； <code>git commit -a -m &lt;your-commit&gt;</code> 跳过使用暂存区提交已跟踪的文件。</p></li><li><p><code>.gitignore</code> 忽略文件配置文件。</p></li><li><p><code>git check-ignore -v &lt;file-name&gt;</code> 检查文件被哪条规则忽略。</p></li><li><p><code>git rm &lt;file-name&gt;</code> 移除文件（磁盘和暂存区）。</p></li><li><p><code>git rm --cached &lt;file-name&gt;</code> 仅从暂存区移除。</p></li><li><p><code>git mv &lt;file-from&gt; &lt;file-to&gt;</code> 移动/重命名文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
